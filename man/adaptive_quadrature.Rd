% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adaptive_quadrature.R
\name{adaptive_quadrature}
\alias{adaptive_quadrature}
\title{Break a function into intervals using adaptive quadrature}
\usage{
adaptive_quadrature(
  f1,
  n_intervals,
  left,
  right,
  debug_on = FALSE,
  delta = 0.001
)
}
\arguments{
\item{f1}{a function returning values in log space. Effort has been taken to
ensure the quadrature method is relatively underflow-safe, working with log
values wherever possible.}

\item{n_intervals}{the final number of intervals resulting from the
quadrature process.}

\item{left, right}{the range of the interval to explore.}

\item{debug_on}{if TRUE then produces a plot comparing the approximating
function with the true function evaluated over a grid.}

\item{delta}{the small distance used when calculating gradients near the
midpoint. This value is used as a proportion of the interval, not as an
absolute value, meaning values can never be proposed outside of the
quadrature range.}
}
\description{
Takes a function \code{f1(x)} that returns values in log space
  (e.g. a log-likelihood) and adaptively chooses x-values such that the final
  discretised curve is reasonably smooth. The adaptive method uses Simpson's
  rule, meaning the final curve can be approximated by a series of
  quadratics. Returns a data.frame with all the intervals used in quadrature.
  This method is only appropriate for simple, unimodal distributions, and is
  not guaranteed to work for any distribution.
}
\details{
The adaptive method works by breaking the curve into a series of
  intervals, and for each interval evaluating the area via both trapezoidal
  rule and Simpson's rule. If an interval has a large discrepancy in area
  between the two methods then this implies the function is not very linear
  over this interval and so it is a good target for further subdivision.
  However, there is an important edge-case in which the midpoint of the
  interval happens to have a corresponding function value that is exactly at
  the midpoint of the y-range by chance, in which case the function would
  appear linear. For this reason, gradient information is also taken into
  account. The gradient is evaluated over the full interval and at the
  midpoint (searching a small distance delta from the midpoint). If the
  gradients are very different this also suggests the function is non-linear
  over the interval and so is a target for further subdivision. Both area-
  and gradient-based information are combined to produce a total score, and
  the interval with the highest score is split into two subintervals about
  the midpoint. This process is repeated \code{n_intervals} times. This
  method ensures that breakpoints are placed at areas where 1) the curve is
  changing rapidly, and 2) the area is large. Hence, it does a decent job of
  approximating the total area under the curve, and can also be used to
  calculate tails of the distribution reasonably accurately.
}
